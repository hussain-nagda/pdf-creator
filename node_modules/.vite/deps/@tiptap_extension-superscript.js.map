{
  "version": 3,
  "sources": ["../../@tiptap/extension-superscript/src/superscript.ts", "../../@tiptap/extension-superscript/src/index.ts"],
  "sourcesContent": ["import { Mark, mergeAttributes } from '@tiptap/core'\nimport type { StyleParseRule } from '@tiptap/pm/model'\n\nexport interface SuperscriptExtensionOptions {\n  /**\n   * HTML attributes to add to the superscript element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    superscript: {\n      /**\n       * Set a superscript mark\n       * @example editor.commands.setSuperscript()\n       */\n      setSuperscript: () => ReturnType\n      /**\n       * Toggle a superscript mark\n       * @example editor.commands.toggleSuperscript()\n       */\n      toggleSuperscript: () => ReturnType\n      /**\n       * Unset a superscript mark\n       *  @example editor.commands.unsetSuperscript()\n       */\n      unsetSuperscript: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create superscript text.\n * @see https://www.tiptap.dev/api/marks/superscript\n */\nexport const Superscript = Mark.create<SuperscriptExtensionOptions>({\n  name: 'superscript',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'sup',\n      },\n      {\n        style: 'vertical-align',\n        getAttrs(value) {\n          // Don’t match this rule if the vertical align isn’t super.\n          if (value !== 'super') {\n            return false\n          }\n\n          // If it falls through we’ll match, and this mark will be applied.\n          return null\n        },\n      } as StyleParseRule,\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['sup', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setSuperscript:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleSuperscript:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetSuperscript:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-.': () => this.editor.commands.toggleSuperscript(),\n    }\n  },\n})\n", "import { Superscript } from './superscript.js'\n\nexport * from './superscript.js'\n\nexport default Superscript\n"],
  "mappings": ";;;;;;;;AAsCO,IAAM,cAAc,KAAK,OAAoC;EAClE,MAAM;EAEN,aAAa;AACX,WAAO;MACL,gBAAgB,CAAC;IACnB;EACF;EAEA,YAAY;AACV,WAAO;MACL;QACE,KAAK;MACP;MACA;QACE,OAAO;QACP,SAAS,OAAO;AAEd,cAAI,UAAU,SAAS;AACrB,mBAAO;UACT;AAGA,iBAAO;QACT;MACF;IACF;EACF;EAEA,WAAW,EAAE,eAAe,GAAG;AAC7B,WAAO,CAAC,OAAO,gBAAgB,KAAK,QAAQ,gBAAgB,cAAc,GAAG,CAAC;EAChF;EAEA,cAAc;AACZ,WAAO;MACL,gBACE,MACA,CAAC,EAAE,SAAS,MAAM;AAChB,eAAO,SAAS,QAAQ,KAAK,IAAI;MACnC;MACF,mBACE,MACA,CAAC,EAAE,SAAS,MAAM;AAChB,eAAO,SAAS,WAAW,KAAK,IAAI;MACtC;MACF,kBACE,MACA,CAAC,EAAE,SAAS,MAAM;AAChB,eAAO,SAAS,UAAU,KAAK,IAAI;MACrC;IACJ;EACF;EAEA,uBAAuB;AACrB,WAAO;MACL,SAAS,MAAM,KAAK,OAAO,SAAS,kBAAkB;IACxD;EACF;AACF,CAAC;AC5FD,IAAO,gBAAQ;",
  "names": []
}
